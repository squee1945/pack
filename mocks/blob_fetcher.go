// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpack/pack (interfaces: BlobFetcher)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	semver "github.com/Masterminds/semver"
	gomock "github.com/golang/mock/gomock"

	blob "github.com/buildpack/pack/blob"
)

// MockBlobFetcher is a mock of BlobFetcher interface
type MockBlobFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockBlobFetcherMockRecorder
}

// MockBlobFetcherMockRecorder is the mock recorder for MockBlobFetcher
type MockBlobFetcherMockRecorder struct {
	mock *MockBlobFetcher
}

// NewMockBlobFetcher creates a new mock instance
func NewMockBlobFetcher(ctrl *gomock.Controller) *MockBlobFetcher {
	mock := &MockBlobFetcher{ctrl: ctrl}
	mock.recorder = &MockBlobFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlobFetcher) EXPECT() *MockBlobFetcherMockRecorder {
	return m.recorder
}

// FetchBuildpack mocks base method
func (m *MockBlobFetcher) FetchBuildpack(arg0 string) (blob.Buildpack, error) {
	ret := m.ctrl.Call(m, "FetchBuildpack", arg0)
	ret0, _ := ret[0].(blob.Buildpack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBuildpack indicates an expected call of FetchBuildpack
func (mr *MockBlobFetcherMockRecorder) FetchBuildpack(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBuildpack", reflect.TypeOf((*MockBlobFetcher)(nil).FetchBuildpack), arg0)
}

// FetchLifecycle mocks base method
func (m *MockBlobFetcher) FetchLifecycle(arg0 *semver.Version, arg1 string) (blob.Lifecycle, error) {
	ret := m.ctrl.Call(m, "FetchLifecycle", arg0, arg1)
	ret0, _ := ret[0].(blob.Lifecycle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLifecycle indicates an expected call of FetchLifecycle
func (mr *MockBlobFetcherMockRecorder) FetchLifecycle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLifecycle", reflect.TypeOf((*MockBlobFetcher)(nil).FetchLifecycle), arg0, arg1)
}
