// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpack/pack (interfaces: BuildpackFetcher)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	buildpack "github.com/blob/pack/blob"
)

// MockBuildpackFetcher is a mock of BuildpackFetcher interface
type MockBuildpackFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackFetcherMockRecorder
}

// MockBuildpackFetcherMockRecorder is the mock recorder for MockBuildpackFetcher
type MockBuildpackFetcherMockRecorder struct {
	mock *MockBuildpackFetcher
}

// NewMockBuildpackFetcher creates a new mock instance
func NewMockBuildpackFetcher(ctrl *gomock.Controller) *MockBuildpackFetcher {
	mock := &MockBuildpackFetcher{ctrl: ctrl}
	mock.recorder = &MockBuildpackFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuildpackFetcher) EXPECT() *MockBuildpackFetcherMockRecorder {
	return m.recorder
}

// FetchBuildpack mocks base method
func (m *MockBuildpackFetcher) FetchBuildpack(arg0 string) (buildpack.Buildpack, error) {
	ret := m.ctrl.Call(m, "FetchBuildpack", arg0)
	ret0, _ := ret[0].(buildpack.Buildpack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBuildpack indicates an expected call of FetchBuildpack
func (mr *MockBuildpackFetcherMockRecorder) FetchBuildpack(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBuildpack", reflect.TypeOf((*MockBuildpackFetcher)(nil).FetchBuildpack), arg0)
}
